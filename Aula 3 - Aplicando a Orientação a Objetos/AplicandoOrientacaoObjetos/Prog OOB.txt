Programação orientada a objetos:
Adequada para alteração -> Chamada de classes e passagem de parametros
Regras de negócio

Classe -> especifica o conteudo de um objeto (abstração)

A classe é criada fora do codigo prioncipal,e é invocada.

Classe filme

Variaveis:

String nome;
int anoDeLancamento;
boolean incluidoNoPlano;
double avalicao;
int totalAvaliacoes;
int duracaoEmMinutos;

no codigo principal, os atributos tem que ser chamados dessa forma:
void exibeFichaTecnica(){
        System.out.println("Nome do scrrenmatch.modelos.Filme: " + nome);
        System.out.println("Ano de lançamento: " + anoDeLancamento);
    }

scrrenmatch.modelos.Filme meuFilme = new scrrenmatch.modelos.Filme();
meuFilme.nome = "Harry Potter e a Pedra Filosofal";

public static void main(String[] args) {
        scrrenmatch.modelos.Filme meuFilme = new scrrenmatch.modelos.Filme();

        meuFilme.nome = "Harry Potter e a Pedra Filosofal";
        meuFilme.anoDeLancamento = 2000;
        meuFilme.duracaoEmMinutos = 192;

        meuFilme.exibeFichaTecnica(); -> chama o retorno da classe
    }

RESUMO:

Uma classe é uma estrutura que define um tipo de objeto. A classe é como um molde, que define quais são as características (atributos) e comportamentos (métodos) que os objetos desse tipo vão possuir. Por exemplo, podemos definir uma classe chamada Pessoa que tenha os atributos nome e idade, além do método fazAniversario()
Já um objeto, é uma instância de uma classe, sendo por meio dele que conseguimos representar informações na aplicação, pois a classe serve apenas para padronizar os objetos, mas não para representar um objeto em si. Para criar um objeto em Java, precisamos utilizar a palavra reservada new seguida do nome da classe e de parênteses vazios.

---

Aula 2:

Do jeito que o programa estava anteriormente, eu posso alterar a média do filme diretamente no código.

Para isso, o encapsulamento foi introduzido.
Que é respeito das classes para não alterar o parametro em outras classes.

Modificador de Acesso: private.
método get e set dentro de uma classe private


Public
O modificador de acesso public é o mais permissivo de todos. Uma classe, atributo ou método declarado como public pode ser acessado por qualquer classe em qualquer pacote. Ou seja, ele possui visibilidade pública e pode ser utilizado livremente.

Default (Package-private)
O modificador de acesso default é aquele que não especifica nenhum modificador de acesso. Quando nenhum modificador de acesso é especificado, a classe, atributo ou método pode ser acessado apenas pelas classes que estão no mesmo pacote.

Private
O modificador de acesso private é o mais restritivo de todos. Uma classe, atributo ou método declarado como private só pode ser acessado dentro da própria classe. Ou seja, ele possui visibilidade restrita e não pode ser utilizado por outras classes.

---

String não é uma palavra primitiva e sim uma classe que tem métodos e atributos.
Pacote: organizado pela funcionalidade de suas classes

java doc
https://docs.oracle.com/en/java/javase/17/docs/api/index.html

getters: busca o valor
setters: inclui o valor

this: apenas um indicativo para buscar o nome da variavel e setar dentro do metodo, pois usa-se variaveis iguais
“This”, traduzindo para o português (Isto/este/esta), é usado para fazer referência aos atributos da classe, especialmente em métodos que têm parâmetros com o mesmo nome do atributo da classe em que estamos trabalhando.

exemplo String nome

public void setNome(String nome){
    this.nome = nome;
}

No inteliJ se apertar o ctrl e clicar em cima da classe, estando em outra classe, ele já vai para a classe escrita.


---

3:

Herança: herdar uma classe e especializar ela conforme o necessário
Se trata essa herança entre classe com a palavra extends.

ex: public class Filme extends Titulo{

Sobreescrever métodos: retorna a função super(utilizada para voltar o da mãe) com @Override - uma sobreescrita do método

A herança é um conceito fundamental da orientação a objetos, sendo implementada em Java através da relação é um entre classes. Isso significa que uma classe pode herdar atributos e métodos de outra classe, tornando com isso o código mais reutilizável.

No Java, a herança é realizada através da palavra-chave extends. A classe que herda é chamada de subclasse, e a classe que é herdada é chamada de superclasse. A subclasse pode acessar todos os atributos e métodos públicos e protegidos da superclasse, além de poder sobrescrever os métodos da superclasse para criar comportamentos específicos.

No Java, as anotações são definidas com o uso do símbolo "@" seguido do nome da anotação. Por exemplo, a anotação @Deprecated é usada para indicar que um método ou classe está obsoleto e não deve ser mais utilizado. Outra anotação muito útil é a @Override, conforme foi demonstrado no último vídeo, que indica que um método está sobrescrevendo o mesmo método definido na sua classe mãe.

Polimorfismo: chamar de várias formas o objeto, pela classe, especialização, tipo...

Ao usar herança no Java, temos a possibilidade de utilizar o modificador de acesso protected, que permite que os atributos de uma classe sejam acessados por outras classes do mesmo pacote e também por suas subclasses, independentemente do pacote em que se encontram.

O modificador protected é útil em situações em que uma classe precisa permitir que suas subclasses acessem diretamente seus atributos, sem a necessidade de restringir o acesso apenas pelos métodos getters e setters.

O problema de ter códigos duplicados em várias classes, utilizando a herança como solução;
A palavra-chave extends, utilizada para indicar que uma classe herda de outra;
Como sobrescrever um método sendo herdado, com o uso opcional da anotação @Override;
Como aplicar o conceito de polimorfismo no código, evitando métodos duplicados.

4:

Não consigo por mais de uma classe no extends.
Para uma solução disso, foi criado uma interface ao inves de uma classe.

E essa 'interface' é chamada com a palavra implements na classe que precisar.
Após isso ela faz um override do método para correta configuração da classe que precisar.

Em Java, interfaces são uma forma de definir um contrato que as classes devem seguir, sendo que ele define quais métodos devem ser implementados pelas classes que o implementarem. Interfaces permitem que diferentes classes possam ser tratadas de maneira padronizada, via polimorfismo, tornando assim o código fácil de estender com novos comportamentos.

Utilização de interfaces
Interfaces podem ser utilizadas para definir comportamentos que podem ser aplicados a várias classes diferentes, tornando assim o código mais modular e fácil de manter.

Por exemplo, suponha que temos um sistema de vendas que precisa calcular o imposto de diferentes tipos de produtos. Podemos criar a interface Tributavel, para definir o comportamento de calcular imposto, e criar várias classes diferentes que implementam essa interface para calcular o imposto de diferentes produtos.
